Index: test/dataStructures/graph/GraphTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dataStructures.graph;\r\n\r\nimport com.example.epidemicsolution.dataStructures.graph.GraphType;\r\nimport com.example.epidemicsolution.dataStructures.graph.IGraph;\r\nimport com.example.epidemicsolution.dataStructures.graph.Vertex;\r\nimport com.example.epidemicsolution.dataStructures.graph.graphAdjacencyList.GraphAdjacencyList;\r\nimport com.example.epidemicsolution.dataStructures.graph.graphAdjacencyMatrix.GraphAdjacencyMatrix;\r\nimport com.example.epidemicsolution.exception.GraphException;\r\nimport org.junit.jupiter.api.Assertions;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\n\r\n/**\r\n * IMPORTANT NOTE: In order to test both versions of the graph using the same tests,\r\n * you need to perform the following steps: you must comment the lines of code that\r\n * initialize the graph in the setups using lists as data structure, and in turn,\r\n * the corresponding lines that initialize the graph using arrays must be uncommented.\r\n */\r\npublic class GraphTest {\r\n\r\n\tprivate IGraph<Integer, String> simpleGraph;\r\n\tprivate IGraph<String, Integer> pseudoGraph;\r\n\tprivate IGraph<Integer, String> directedGraph1;\r\n\r\n\tprivate IGraph<String, String> directedGraph2;\r\n\tprivate IGraph<String, String> simpleGraph2;\r\n\r\n\tprivate IGraph<Integer, String> multiGraph;\r\n\tprivate IGraph<Integer, String> multiGraphDirected;\r\n\r\n\tprivate void setupStageSimpleGraph() {\r\n\t\tsimpleGraph = new GraphAdjacencyList<>(GraphType.SIMPLE);\r\n//\t\tsimpleGraph = new GraphAdjacencyMatrix<>(GraphType.SIMPLE);\r\n\t\t// Insert vertexes in the graph\r\n\t\tsimpleGraph.insertVertex(1, \"A\");\r\n\t\tsimpleGraph.insertVertex(2, \"B\");\r\n\t\tsimpleGraph.insertVertex(3, \"C\");\r\n\t\tsimpleGraph.insertVertex(4, \"D\");\r\n\t\tsimpleGraph.insertVertex(5, \"E\");\r\n\t\tsimpleGraph.insertVertex(6, \"F\");\r\n\t\tsimpleGraph.insertVertex(7, \"G\");\r\n\t\tsimpleGraph.insertVertex(10, \"I'm tired .-.\");\r\n\t}\r\n\r\n\tprivate void setupStagePseudoGraph() {\r\n\t\tpseudoGraph = new GraphAdjacencyList<>(GraphType.PSEUDOGRAPH);\r\n//\t\tpseudoGraph = new GraphAdjacencyMatrix<>(GraphType.PSEUDOGRAPH);\r\n\t\t// Insert vertexes in the graph\r\n\t\tpseudoGraph.insertVertex(\"1\", 1);\r\n\t\tpseudoGraph.insertVertex(\"2\", 2);\r\n\t\tpseudoGraph.insertVertex(\"3\", 3);\r\n\t\tpseudoGraph.insertVertex(\"4\", 4);\r\n\t\tpseudoGraph.insertVertex(\"5\", 4);\r\n\r\n\t\tpseudoGraph.insertEdge(\"1\", \"2\", 1);\r\n\t\tpseudoGraph.insertEdge(\"1\", \"1\", 1);\r\n\t\tpseudoGraph.insertEdge(\"1\", \"3\", 1);\r\n\t\tpseudoGraph.insertEdge(\"2\", \"4\", 1);\r\n\t\tpseudoGraph.insertEdge(\"5\", \"1\", 1);\r\n\t\tpseudoGraph.insertEdge(\"5\", \"2\", 1);\r\n\t\tpseudoGraph.insertEdge(\"5\", \"3\", 1);\r\n\t\tpseudoGraph.insertEdge(\"5\", \"4\", 1);\r\n\t\tpseudoGraph.insertEdge(\"5\", \"5\", 1);\r\n\r\n\t}\r\n\r\n\tprivate void setupStageMultiGraph() {\r\n\t\tmultiGraph = new GraphAdjacencyList<>(GraphType.MULTIGRAPH);\r\n//\t\tmultiGraph = new GraphAdjacencyMatrix<>(GraphType.MULTIGRAPH);\r\n\t\tmultiGraph.insertVertex(1, \"1\");\r\n\t\tmultiGraph.insertVertex(2, \"2\");\r\n\t\tmultiGraph.insertVertex(3, \"3\");\r\n\t\tmultiGraph.insertVertex(4, \"4\");\r\n\t\tmultiGraph.insertVertex(5, \"5\");\r\n\t\tmultiGraph.insertVertex(6, \"6\");\r\n\r\n\t\tmultiGraph.insertEdge(1, 2, 1);\r\n\t\tmultiGraph.insertEdge(2, 3, 1);\r\n\t\tmultiGraph.insertEdge(3, 4, 1);\r\n\t\tmultiGraph.insertEdge(4, 5, 1);\r\n\t\tmultiGraph.insertEdge(5, 1, 1);\r\n\r\n\t\tmultiGraph.insertEdge(1, 6, 1);\r\n\t\tmultiGraph.insertEdge(2, 6, 1);\r\n\t\tmultiGraph.insertEdge(3, 6, 1);\r\n\t\tmultiGraph.insertEdge(4, 6, 1);\r\n\t\tmultiGraph.insertEdge(5, 6, 1);\r\n\t}\r\n\r\n\tprivate void setupStageDirectedGraph() {\r\n\t\tdirectedGraph1 = new GraphAdjacencyList<>(GraphType.DIRECTED);\r\n//\t\tdirectedGraph1 = new GraphAdjacencyMatrix<>(GraphType.DIRECTED);\r\n\t\tdirectedGraph1.insertVertex(1, \"1\");\r\n\t\tdirectedGraph1.insertVertex(2, \"2\");\r\n\t\tdirectedGraph1.insertVertex(3, \"3\");\r\n\t\tdirectedGraph1.insertVertex(4, \"4\");\r\n\t\tdirectedGraph1.insertVertex(5, \"5\");\r\n\t\tdirectedGraph1.insertVertex(6, \"6\");\r\n\t\tdirectedGraph1.insertVertex(7, \"7\");\r\n\t\tdirectedGraph1.insertVertex(8, \"8\");\r\n\t\tdirectedGraph1.insertVertex(9, \"9\");\r\n\t\tdirectedGraph1.insertVertex(10, \"10\");\r\n\t\tdirectedGraph1.insertVertex(11, \"11\");\r\n\r\n\t\tdirectedGraph1.insertEdge(1, 2, 1);\r\n\t\tdirectedGraph1.insertEdge(2, 1, 1);\r\n\t\tdirectedGraph1.insertEdge(1, 3, 1);\r\n\t\tdirectedGraph1.insertEdge(3, 1, 1);\r\n\t\tdirectedGraph1.insertEdge(2, 4, 1);\r\n\t\tdirectedGraph1.insertEdge(9, 7, 1);\r\n\t\tdirectedGraph1.insertEdge(9, 11, 1);\r\n\t\tdirectedGraph1.insertEdge(6, 10, 1);\r\n\t\tdirectedGraph1.insertEdge(11, 7, 1);\r\n\t\tdirectedGraph1.insertEdge(8, 6, 1);\r\n\t\tdirectedGraph1.insertEdge(10, 11, 1);\r\n\t\tdirectedGraph1.insertEdge(5, 1, 1);\r\n\t\tdirectedGraph1.insertEdge(5, 6, 1);\r\n\t\tdirectedGraph1.insertEdge(5, 3, 1);\r\n\t\tdirectedGraph1.insertEdge(9, 4, 1);\r\n\t\tdirectedGraph1.insertEdge(5, 7, 1);\r\n\t\tdirectedGraph1.insertEdge(3, 6, 1);\r\n\t\tdirectedGraph1.insertEdge(4, 7, 1);\r\n\t\tdirectedGraph1.insertEdge(6, 7, 1);\r\n\t\tdirectedGraph1.insertEdge(8, 10, 1);\r\n\t\tdirectedGraph1.insertEdge(8, 11, 1);\r\n\t\tdirectedGraph1.insertEdge(5, 2, 1);\r\n\t\tdirectedGraph1.insertEdge(5, 4, 1);\r\n\t\tdirectedGraph1.insertEdge(2, 9, 1);\r\n\t\tdirectedGraph1.insertEdge(8, 7, 1);\r\n\r\n\t}\r\n\r\n\r\n\tprivate void setupStageMultiGraphDirected() {\r\n\t\tmultiGraphDirected = new GraphAdjacencyList<>(GraphType.MULTIGRAPH_DIRECTED);\r\n//\t\tmultiGraphDirected = new GraphAdjacencyMatrix<>(GraphType.MULTIGRAPH_DIRECTED);\r\n\t}\r\n\r\n\tprivate void setupStage6() {\r\n\t\tsimpleGraph2 = new GraphAdjacencyList<>(GraphType.SIMPLE);\r\n//\t\tsimpleGraph2 = new GraphAdjacencyMatrix<>(GraphType.SIMPLE);\r\n\t\tsimpleGraph2.insertVertex(\"r\", \"r\");\r\n\t\tsimpleGraph2.insertVertex(\"s\", \"s\");\r\n\t\tsimpleGraph2.insertVertex(\"t\", \"t\");\r\n\t\tsimpleGraph2.insertVertex(\"u\", \"u\");\r\n\t\tsimpleGraph2.insertVertex(\"v\", \"v\");\r\n\t\tsimpleGraph2.insertVertex(\"w\", \"w\");\r\n\t\tsimpleGraph2.insertVertex(\"x\", \"x\");\r\n\t\tsimpleGraph2.insertVertex(\"y\", \"y\");\r\n\t\tsimpleGraph2.insertVertex(\"z\", \"z\");\r\n\t}\r\n\r\n\tprivate void setupStage7() {\r\n\t\tdirectedGraph2 = new GraphAdjacencyList<>(GraphType.DIRECTED);\r\n//\t\tdirectedGraph2 = new GraphAdjacencyMatrix<>(GraphType.DIRECTED);\r\n\r\n\t\tdirectedGraph2.insertVertex(\"u\", \"u\");\r\n\t\tdirectedGraph2.insertVertex(\"v\", \"v\");\r\n\t\tdirectedGraph2.insertVertex(\"w\", \"w\");\r\n\t\tdirectedGraph2.insertVertex(\"x\", \"x\");\r\n\t\tdirectedGraph2.insertVertex(\"y\", \"y\");\r\n\t\tdirectedGraph2.insertVertex(\"z\", \"z\");\r\n\r\n\t}\r\n\r\n\tprivate void setupStage8() {\r\n\r\n\t\tsetupStageSimpleGraph();\r\n\r\n\t\tsimpleGraph.insertEdge(1, 3, 1);\r\n\t\tsimpleGraph.insertEdge(1, 5, 1);\r\n\t\tsimpleGraph.insertEdge(1, 6, 1);\r\n\t\tsimpleGraph.insertEdge(5, 2, 1);\r\n\t\tsimpleGraph.insertEdge(5, 7, 1);\r\n\t\tsimpleGraph.insertEdge(2, 4, 1);\r\n\t\tsimpleGraph.insertEdge(4, 7, 1);\r\n\t\tsimpleGraph.insertEdge(1, 10, 1);\r\n\r\n\t}\r\n\r\n\t// insertVertex() method\r\n\t// Test 1\r\n\t@Test\r\n\tpublic void testInsertVertex1() {\r\n\t\tsetupStageMultiGraphDirected();\r\n\r\n\t\tmultiGraphDirected.insertVertex(1, \"A\");\r\n//\t\tAssertions.assertEquals(1, multiGraphDirectedListAdjacency.size());\r\n\r\n\t\tAssertions.assertEquals(\"A\", multiGraphDirected.getVertex(1).getElement());\r\n\t}\r\n\r\n\t// Test 2\r\n\t// Valid that vertices that are already in the network cannot be entered.\r\n\t@Test\r\n\tpublic void testInsertVertex2() {\r\n\t\tsetupStageSimpleGraph();\r\n\t\tsimpleGraph.insertVertex(1, \"AAaa\");\r\n\t\tAssertions.assertEquals(\"A\", simpleGraph.getVertex(1).getElement());\r\n\t}\r\n\r\n\t// Test 3\r\n\t@Test\r\n\tpublic void testInsertVertex3() {\r\n\t\tsetupStageMultiGraphDirected();\r\n\r\n\t\tmultiGraphDirected.insertVertex(1, \"A\");\r\n\t\tmultiGraphDirected.insertVertex(2, \"B\");\r\n\t\tmultiGraphDirected.insertVertex(3, \"C\");\r\n\t\tmultiGraphDirected.insertVertex(4, \"D\");\r\n\t\tmultiGraphDirected.insertVertex(5, \"E\");\r\n//\t\tAssertions.assertEquals(5, multiGraphDirectedListAdjacency.size());\r\n\r\n\t\tAssertions.assertEquals(\"A\", multiGraphDirected.getVertex(1).getElement());\r\n\t\tAssertions.assertEquals(\"B\", multiGraphDirected.getVertex(2).getElement());\r\n\t\tAssertions.assertEquals(\"C\", multiGraphDirected.getVertex(3).getElement());\r\n\t\tAssertions.assertEquals(\"D\", multiGraphDirected.getVertex(4).getElement());\r\n\t\tAssertions.assertEquals(\"E\", multiGraphDirected.getVertex(5).getElement());\r\n\t}\r\n\r\n\t// deleteVertex() method\r\n\t// Test 1\r\n\t@Test\r\n\tpublic void testDeleteVertex1() {\r\n\t\tsetupStageSimpleGraph();\r\n\t\tsimpleGraph.deleteVertex(1);\r\n\t\tsimpleGraph.deleteVertex(2);\r\n\t\tAssertions.assertNull(simpleGraph.getVertex(1));\r\n\t\tAssertions.assertNull(simpleGraph.getVertex(2));\r\n\t}\r\n\r\n\t// Test 2\r\n\t@Test\r\n\tpublic void testDeleteVertex2() {\r\n\t\tsetupStageDirectedGraph();\r\n\r\n\t\tdirectedGraph1.deleteVertex(7);\r\n\r\n\t\tAssertions.assertNull(directedGraph1.getVertex(7));\r\n\t\tAssertions.assertThrows(GraphException.class, () -> directedGraph1.adjacent(4, 7));\r\n\t\tAssertions.assertThrows(GraphException.class, () -> directedGraph1.adjacent(5, 7));\r\n\t\tAssertions.assertThrows(GraphException.class, () -> directedGraph1.adjacent(6, 7));\r\n\t\tAssertions.assertThrows(GraphException.class, () -> directedGraph1.adjacent(8, 7));\r\n\t\tAssertions.assertThrows(GraphException.class, () -> directedGraph1.adjacent(9, 7));\r\n\t\tAssertions.assertThrows(GraphException.class, () -> directedGraph1.adjacent(11, 7));\r\n\t}\r\n\r\n\t// Test 3\r\n\t@Test\r\n\tpublic void testDeleteVertex3() {\r\n\t\tsetupStageMultiGraph();\r\n\t\tmultiGraph.deleteVertex(6);\r\n\r\n\t\tAssertions.assertNull(multiGraph.getVertex(6));\r\n\r\n\t\tAssertions.assertThrows(GraphException.class, () -> multiGraph.adjacent(1, 6));\r\n\t\tAssertions.assertThrows(GraphException.class, () -> multiGraph.adjacent(2, 6));\r\n\t\tAssertions.assertThrows(GraphException.class, () -> multiGraph.adjacent(3, 6));\r\n\t\tAssertions.assertThrows(GraphException.class, () -> multiGraph.adjacent(4, 6));\r\n\t\tAssertions.assertThrows(GraphException.class, () -> multiGraph.adjacent(5, 6));\r\n\t}\r\n\r\n\r\n\t// getVertex() method\r\n\t// Test 1\r\n\t@Test\r\n\tpublic void testSearch1() {\r\n\t\tsetupStageSimpleGraph();\r\n\t\tAssertions.assertEquals(\"A\", simpleGraph.getVertex(1).getElement());\r\n\t\tAssertions.assertEquals(\"B\", simpleGraph.getVertex(2).getElement());\r\n\t\tAssertions.assertEquals(\"C\", simpleGraph.getVertex(3).getElement());\r\n\t\tAssertions.assertEquals(\"D\", simpleGraph.getVertex(4).getElement());\r\n\t\tAssertions.assertEquals(\"E\", simpleGraph.getVertex(5).getElement());\r\n\t}\r\n\r\n\t// Test 2\r\n\t// Search for elements that are not in the graph\r\n\t@Test\r\n\tpublic void testSearch2() {\r\n\t\tsetupStageSimpleGraph();\r\n\t\tAssertions.assertNull(simpleGraph.getVertex(16));\r\n\t\tAssertions.assertNull(simpleGraph.getVertex(17));\r\n\t\tAssertions.assertNull(simpleGraph.getVertex(18));\r\n\t}\r\n\r\n\t// Test 3\r\n\t// Validation that data stored in the graph is not deleted after searching for elements stored in vertices.\r\n\t@Test\r\n\tpublic void testSearch3() {\r\n\t\tsetupStageDirectedGraph();\r\n\t\tAssertions.assertEquals(\"4\", directedGraph1.getVertex(4).getElement());\r\n\t\tAssertions.assertEquals(\"5\", directedGraph1.getVertex(5).getElement());\r\n\t\tAssertions.assertEquals(\"6\", directedGraph1.getVertex(6).getElement());\r\n\t\tAssertions.assertEquals(\"7\", directedGraph1.getVertex(7).getElement());\r\n\t\tAssertions.assertEquals(\"8\", directedGraph1.getVertex(8).getElement());\r\n\t}\r\n\r\n\r\n\t// insertEdge() method\r\n\t// Test 1\r\n\t@Test\r\n\tpublic void testInsertEdge1() {\r\n\t\tsetupStageSimpleGraph();\r\n\t\t// Insert edges in the graph\r\n\t\tsimpleGraph.insertEdge(1, 2, 1);\r\n\t\tsimpleGraph.insertEdge(2, 3, 1);\r\n\t\tsimpleGraph.insertEdge(3, 4, 1);\r\n\t\tsimpleGraph.insertEdge(4, 5, 1);\r\n\t\tsimpleGraph.insertEdge(5, 1, 1);\r\n\t\t// Verify the order of adjacency lists\r\n\t\tAssertions.assertTrue(simpleGraph.adjacent(1, 2));\r\n\t\tAssertions.assertTrue(simpleGraph.adjacent(2, 3));\r\n\t\tAssertions.assertTrue(simpleGraph.adjacent(3, 4));\r\n\t\tAssertions.assertTrue(simpleGraph.adjacent(4, 5));\r\n\t\tAssertions.assertTrue(simpleGraph.adjacent(5, 1));\r\n\t}\r\n\r\n\t// Test 2\r\n\t@Test\r\n\tpublic void testInsertEdge2() {\r\n\t\tsetupStageMultiGraphDirected();\r\n\r\n\t\tmultiGraphDirected.insertVertex(1, \"A\");\r\n\t\tmultiGraphDirected.insertEdge(1, 1, 1);\r\n\r\n\t\ttry {\r\n\t\t\tmultiGraphDirected.insertEdge(1, 1, 1);\r\n\t\t\tmultiGraphDirected.insertEdge(1, 1, 1);\r\n\t\t\tmultiGraphDirected.insertEdge(1, 1, 1);\r\n\t\t\tAssertions.assertTrue(multiGraphDirected.adjacent(1, 1));\r\n\t\t} catch (GraphException e) {\r\n\t\t\tfail(\"The multi directed graph accepts multiple edges and loops.\");\r\n\t\t}\r\n\t}\r\n\r\n\t// Test 3\r\n\t@Test\r\n\tpublic void testInsertEdge3() {\r\n\t\tsetupStageSimpleGraph();\r\n\t\tsimpleGraph.insertEdge(1, 2, 1);\r\n\t\tAssertions.assertThrows(GraphException.class, () -> simpleGraph.insertEdge(1, 2, 1));\r\n\t}\r\n\r\n\t// insertEdge() method\r\n\t// Test 1\r\n\t// Remove loops from the graph\r\n\t@Test\r\n\tpublic void testDeleteEdge1() {\r\n\t\tsetupStagePseudoGraph();\r\n\t\tpseudoGraph.deleteEdge(\"1\", \"1\");\r\n\t\tpseudoGraph.deleteEdge(\"1\", \"5\");\r\n\t\tAssertions.assertFalse(pseudoGraph.adjacent(\"1\", \"1\"));\r\n\t\tAssertions.assertFalse(pseudoGraph.adjacent(\"1\", \"5\"));\r\n\t\tAssertions.assertFalse(pseudoGraph.adjacent(\"5\", \"1\"));\r\n\t}\r\n\r\n\t// Test 2\r\n\t// Remove only one address in a directed graph\r\n\t@Test\r\n\tpublic void testDeleteEdge2() {\r\n\t\tsetupStageDirectedGraph();\r\n\t\tdirectedGraph1.deleteEdge(1, 2);\r\n\t\tdirectedGraph1.deleteEdge(1, 3);\r\n\t\tAssertions.assertFalse(directedGraph1.adjacent(1, 2));\r\n\t\tAssertions.assertFalse(directedGraph1.adjacent(1, 3));\r\n\r\n\t\tAssertions.assertTrue(directedGraph1.adjacent(2, 1));\r\n\t\tAssertions.assertTrue(directedGraph1.adjacent(3, 1));\r\n\t}\r\n\r\n\t// Test 3\r\n\t@Test\r\n\tpublic void testDeleteEdge3() {\r\n\t\tsetupStagePseudoGraph();\r\n\t\tAssertions.assertThrows(GraphException.class, () -> pseudoGraph.deleteEdge(\"1\", \"9\"));\r\n\t}\r\n\r\n\t// adjacent() method\r\n\t// Test 1\r\n\t@Test\r\n\tpublic void testAdjacent1() {\r\n\t\tsetupStageDirectedGraph();\r\n\t\tAssertions.assertTrue(directedGraph1.adjacent(4, 7));\r\n\t\tAssertions.assertTrue(directedGraph1.adjacent(5, 7));\r\n\t\tAssertions.assertTrue(directedGraph1.adjacent(6, 7));\r\n\t\tAssertions.assertTrue(directedGraph1.adjacent(8, 7));\r\n\t\tAssertions.assertTrue(directedGraph1.adjacent(9, 7));\r\n\t\tAssertions.assertTrue(directedGraph1.adjacent(11, 7));\r\n\t}\r\n\r\n\t// Test 2\r\n\t@Test\r\n\tpublic void testAdjacent2() {\r\n\t\tsetupStageDirectedGraph();\r\n\t\tAssertions.assertFalse(directedGraph1.adjacent(7, 4));\r\n\t\tAssertions.assertFalse(directedGraph1.adjacent(7, 5));\r\n\t\tAssertions.assertFalse(directedGraph1.adjacent(7, 6));\r\n\t\tAssertions.assertFalse(directedGraph1.adjacent(7, 8));\r\n\t\tAssertions.assertFalse(directedGraph1.adjacent(7, 9));\r\n\t\tAssertions.assertFalse(directedGraph1.adjacent(7, 11));\r\n\t}\r\n\r\n\t// Test 3\r\n\t@Test\r\n\tpublic void testAdjacent3() {\r\n\t\tsetupStageDirectedGraph();\r\n\t\tAssertions.assertThrows(GraphException.class, () -> directedGraph1.adjacent(1, 18));\r\n\t\tAssertions.assertThrows(GraphException.class, () -> directedGraph1.adjacent(18, 1));\r\n\t}\r\n\r\n\t// BFS() method\r\n\t// Test 1\r\n\t@Test\r\n\tpublic void testBFS1() {\r\n\t\tsetupStage6();\r\n\r\n\t\tsimpleGraph2.insertEdge(\"v\", \"r\", 1);\r\n\t\tsimpleGraph2.insertEdge(\"r\", \"s\", 1);\r\n\t\tsimpleGraph2.insertEdge(\"s\", \"w\", 1);\r\n\t\tsimpleGraph2.insertEdge(\"w\", \"t\", 1);\r\n\t\tsimpleGraph2.insertEdge(\"w\", \"x\", 1);\r\n\t\tsimpleGraph2.insertEdge(\"t\", \"x\", 1);\r\n\t\tsimpleGraph2.insertEdge(\"t\", \"u\", 1);\r\n\t\tsimpleGraph2.insertEdge(\"x\", \"u\", 1);\r\n\t\tsimpleGraph2.insertEdge(\"u\", \"y\", 1);\r\n\t\tsimpleGraph2.insertEdge(\"x\", \"y\", 1);\r\n\r\n\t\tsimpleGraph2.BFS(\"s\");\r\n\r\n\r\n\t\tAssertions.assertEquals(0, simpleGraph2.getVertex(\"s\").getDistance());\r\n\t\tAssertions.assertEquals(1, simpleGraph2.getVertex(\"r\").getDistance());\r\n\t\tAssertions.assertEquals(1, simpleGraph2.getVertex(\"w\").getDistance());\r\n\t\tAssertions.assertEquals(2, simpleGraph2.getVertex(\"v\").getDistance());\r\n\t\tAssertions.assertEquals(2, simpleGraph2.getVertex(\"t\").getDistance());\r\n\t\tAssertions.assertEquals(2, simpleGraph2.getVertex(\"x\").getDistance());\r\n\t\tAssertions.assertEquals(3, simpleGraph2.getVertex(\"u\").getDistance());\r\n\t\tAssertions.assertEquals(3, simpleGraph2.getVertex(\"y\").getDistance());\r\n\t}\r\n\r\n\t// Test 2\r\n\t@Test\r\n\tpublic void testBFS2() {\r\n\t\tsetupStageSimpleGraph();\r\n\r\n\t\tsimpleGraph.insertEdge(1, 10, 1);\r\n\t\tsimpleGraph.insertEdge(10, 3, 1);\r\n\t\tsimpleGraph.insertEdge(10, 2, 1);\r\n\t\tsimpleGraph.insertEdge(3, 5, 1);\r\n\t\tsimpleGraph.insertEdge(5, 2, 1);\r\n\t\tsimpleGraph.insertEdge(2, 6, 1);\r\n\t\tsimpleGraph.insertEdge(6, 4, 1);\r\n\t\tsimpleGraph.insertEdge(4, 7, 1);\r\n\r\n\t\tsimpleGraph.BFS(10);\r\n\r\n\t\tAssertions.assertEquals(1, simpleGraph.getVertex(1).getDistance());\r\n\t\tAssertions.assertEquals(1, simpleGraph.getVertex(2).getDistance());\r\n\t\tAssertions.assertEquals(1, simpleGraph.getVertex(3).getDistance());\r\n\t\tAssertions.assertEquals(2, simpleGraph.getVertex(5).getDistance());\r\n\t\tAssertions.assertEquals(2, simpleGraph.getVertex(6).getDistance());\r\n\t\tAssertions.assertEquals(3, simpleGraph.getVertex(4).getDistance());\r\n\t\tAssertions.assertEquals(4, simpleGraph.getVertex(7).getDistance());\r\n\r\n\t}\r\n\r\n\t// Test 3\r\n\t// Validate that the BFS method does not use paths that do not exist (by edges not created).\r\n\t@Test\r\n\tpublic void testBFS3() {\r\n\t\tsetupStageSimpleGraph();\r\n\r\n\t\tsimpleGraph.insertEdge(1, 10, 1);\r\n\t\tsimpleGraph.insertEdge(1, 5, 1);\r\n\t\tsimpleGraph.insertEdge(1, 3, 1);\r\n\r\n\t\tsimpleGraph.BFS(1);\r\n\r\n\t\tAssertions.assertEquals(Integer.MAX_VALUE, simpleGraph.getVertex(7).getDistance());\r\n\r\n\t}\r\n\r\n\t// DFS() method\r\n\t// Test 1\r\n\t// Test to verify discovery times\r\n\t@Test\r\n\tpublic void testDFS1() {\r\n\t\tsetupStage8();\r\n\r\n\t\tsimpleGraph.DFS();\r\n\r\n\t\tAssertions.assertEquals(1, simpleGraph.getVertex(1).getDiscoveryTime());\r\n\t\tAssertions.assertEquals(14, simpleGraph.getVertex(10).getDiscoveryTime());\r\n\t\tAssertions.assertEquals(2, simpleGraph.getVertex(3).getDiscoveryTime());\r\n\t\tAssertions.assertEquals(4, simpleGraph.getVertex(5).getDiscoveryTime());\r\n\t\tAssertions.assertEquals(5, simpleGraph.getVertex(2).getDiscoveryTime());\r\n\t\tAssertions.assertEquals(6, simpleGraph.getVertex(4).getDiscoveryTime());\r\n\t\tAssertions.assertEquals(7, simpleGraph.getVertex(7).getDiscoveryTime());\r\n\t\tAssertions.assertEquals(12, simpleGraph.getVertex(6).getDiscoveryTime());\r\n\r\n\t}\r\n\r\n\t// Test 2\r\n\t// Test to verify finishes times\r\n\t@Test\r\n\tpublic void testDFS2() {\r\n\t\tsetupStage8();\r\n\r\n\t\tsimpleGraph.DFS();\r\n\r\n\t\tAssertions.assertEquals(16, simpleGraph.getVertex(1).getFinishTime());\r\n\t\tAssertions.assertEquals(15, simpleGraph.getVertex(10).getFinishTime());\r\n\t\tAssertions.assertEquals(3, simpleGraph.getVertex(3).getFinishTime());\r\n\t\tAssertions.assertEquals(13, simpleGraph.getVertex(6).getFinishTime());\r\n\t\tAssertions.assertEquals(10, simpleGraph.getVertex(2).getFinishTime());\r\n\t\tAssertions.assertEquals(9, simpleGraph.getVertex(4).getFinishTime());\r\n\t\tAssertions.assertEquals(8, simpleGraph.getVertex(7).getFinishTime());\r\n\r\n\t}\r\n\r\n\r\n\t// Test 3\r\n\t@Test\r\n\tpublic void testDFS3() {\r\n\t\tsetupStage7();\r\n\r\n\t\tdirectedGraph2.insertEdge(\"u\", \"v\", 1);\r\n\t\tdirectedGraph2.insertEdge(\"u\", \"x\", 1);\r\n\t\tdirectedGraph2.insertEdge(\"x\", \"v\", 1);\r\n\t\tdirectedGraph2.insertEdge(\"v\", \"y\", 1);\r\n\t\tdirectedGraph2.insertEdge(\"y\", \"x\", 1);\r\n\t\tdirectedGraph2.insertEdge(\"w\", \"y\", 1);\r\n\t\tdirectedGraph2.insertEdge(\"w\", \"z\", 1);\r\n\t\tdirectedGraph2.insertEdge(\"z\", \"z\", 1);\r\n\r\n\t\tdirectedGraph2.DFS();\r\n\r\n\t\tVertex<String, String> ver_u = directedGraph2.getVertex(\"u\");\r\n\t\tVertex<String, String> ver_v = directedGraph2.getVertex(\"v\");\r\n\t\tVertex<String, String> ver_y = directedGraph2.getVertex(\"y\");\r\n\t\tVertex<String, String> ver_x = directedGraph2.getVertex(\"x\");\r\n\t\tVertex<String, String> ver_w = directedGraph2.getVertex(\"w\");\r\n\t\tVertex<String, String> ver_z = directedGraph2.getVertex(\"z\");\r\n\r\n\t\t// Discovery time\r\n\t\tAssertions.assertEquals(1, ver_u.getDiscoveryTime());\r\n\t\tAssertions.assertEquals(2, ver_v.getDiscoveryTime());\r\n\t\tAssertions.assertEquals(3, ver_y.getDiscoveryTime());\r\n\t\tAssertions.assertEquals(4, ver_x.getDiscoveryTime());\r\n\t\tAssertions.assertEquals(9, ver_w.getDiscoveryTime());\r\n\t\tAssertions.assertEquals(10, ver_z.getDiscoveryTime());\r\n\r\n\t\t// Finish time\r\n\t\tAssertions.assertEquals(8, ver_u.getFinishTime());\r\n\t\tAssertions.assertEquals(7, ver_v.getFinishTime());\r\n\t\tAssertions.assertEquals(6, ver_y.getFinishTime());\r\n\t\tAssertions.assertEquals(5, ver_x.getFinishTime());\r\n\t\tAssertions.assertEquals(12, ver_w.getFinishTime());\r\n\t\tAssertions.assertEquals(11, ver_z.getFinishTime());\r\n\r\n\t}\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test/dataStructures/graph/GraphTest.java b/test/dataStructures/graph/GraphTest.java
--- a/test/dataStructures/graph/GraphTest.java	(revision 97a62fd676854e9df1de12934974b2ea04460e9c)
+++ b/test/dataStructures/graph/GraphTest.java	(date 1685504203949)
@@ -41,7 +41,7 @@
 		simpleGraph.insertVertex(5, "E");
 		simpleGraph.insertVertex(6, "F");
 		simpleGraph.insertVertex(7, "G");
-		simpleGraph.insertVertex(10, "I'm tired .-.");
+		simpleGraph.insertVertex(10, "I");
 	}
 
 	private void setupStagePseudoGraph() {
Index: .idea/modules.xml
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
deleted file mode 100644
--- a/.idea/modules.xml	(revision 97a62fd676854e9df1de12934974b2ea04460e9c)
+++ /dev/null	(revision 97a62fd676854e9df1de12934974b2ea04460e9c)
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectModuleManager">
-    <modules>
-      <module fileurl="file://$PROJECT_DIR$/epidemic-solution.iml" filepath="$PROJECT_DIR$/epidemic-solution.iml" />
-    </modules>
-  </component>
-</project>
\ No newline at end of file
Index: epidemic-solution.iml
===================================================================
diff --git a/epidemic-solution.iml b/epidemic-solution.iml
deleted file mode 100644
--- a/epidemic-solution.iml	(revision 97a62fd676854e9df1de12934974b2ea04460e9c)
+++ /dev/null	(revision 97a62fd676854e9df1de12934974b2ea04460e9c)
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module version="4">
-  <component name="AdditionalModuleElements">
-    <content url="file://$MODULE_DIR$" dumb="true">
-      <sourceFolder url="file://$MODULE_DIR$/test" isTestSource="true" />
-    </content>
-  </component>
-</module>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"MavenProjectsManager\">\r\n    <option name=\"originalFiles\">\r\n      <list>\r\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_20\" project-jdk-name=\"20\" project-jdk-type=\"JavaSDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 97a62fd676854e9df1de12934974b2ea04460e9c)
+++ b/.idea/misc.xml	(date 1685504219400)
@@ -8,5 +8,7 @@
       </list>
     </option>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_20" project-jdk-name="20" project-jdk-type="JavaSDK" />
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_X" default="true" project-jdk-name="20" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
 </project>
\ No newline at end of file
